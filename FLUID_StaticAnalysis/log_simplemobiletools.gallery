> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :run
preparing listTargetMethod ... 
adding method to listTargetMethod : <android.widget.TextView: void setTextColor(int)>
adding method to listTargetMethod : <android.widget.TextView: void setText(java.lang.CharSequence)>
adding method to listTargetMethod : <android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>
adding method to listTargetMethod : <android.widget.TextView: void setText(char[],int,int)>
adding method to listTargetMethod : <android.widget.TextView: void setText(int)>
adding method to listTargetMethod : <android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageResource(int)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageURI(android.net.Uri)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>
adding method to listTargetMethod : <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>
preparing listTargetMethod ... done
---------------------------------------------------------------------

preparing listTargetClass ... 
adding class to to listTargetClass : com.simplemobiletools.commons.views.RenamePatternTab
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyAppCompatCheckbox
adding class to to listTargetClass : i4.a
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyRecyclerView
adding class to to listTargetClass : com.theartofdev.edmodo.cropper.CropImageView
adding class to to listTargetClass : com.simplemobiletools.commons.views.PatternTab
adding class to to listTargetClass : com.simplemobiletools.commons.views.LineColorPicker
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyFloatingActionButton
adding class to to listTargetClass : com.google.vr.sdk.widgets.video.VrVideoView
adding class to to listTargetClass : com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyCompatRadioButton
adding class to to listTargetClass : com.duolingo.open.rtlviewpager.b
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyEditText
adding class to to listTargetClass : h4.b
adding class to to listTargetClass : h5.w
adding class to to listTargetClass : x4.b
adding class to to listTargetClass : x4.a
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyScrollView
adding class to to listTargetClass : com.alexvasilkov.gestures.GestureFrameLayout
adding class to to listTargetClass : g4.a
adding class to to listTargetClass : l.a
adding class to to listTargetClass : com.google.vr.sdk.widgets.common.VrWidgetView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyButton
adding class to to listTargetClass : com.simplemobiletools.commons.views.Breadcrumbs
adding class to to listTargetClass : com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MySearchMenu
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyViewPager
adding class to to listTargetClass : com.andrognito.patternlockview.PatternLockView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MySeekBar
adding class to to listTargetClass : com.theartofdev.edmodo.cropper.CropOverlayView
adding class to to listTargetClass : com.google.vr.ndk.base.GvrLayout
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyTextView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MySquareImageView
adding class to to listTargetClass : q4.a
adding class to to listTargetClass : com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller
adding class to to listTargetClass : com.simplemobiletools.gallery.pro.views.EditorDrawCanvas
adding class to to listTargetClass : com.simplemobiletools.gallery.pro.views.InstantItemSwitch
adding class to to listTargetClass : com.simplemobiletools.commons.views.FingerprintTab
adding class to to listTargetClass : com.simplemobiletools.commons.views.BiometricIdTab
adding class to to listTargetClass : com.simplemobiletools.commons.views.ColorPickerSquare
adding class to to listTargetClass : com.simplemobiletools.commons.views.RenameSimpleTab
adding class to to listTargetClass : com.simplemobiletools.commons.views.PinTab
adding class to to listTargetClass : com.simplemobiletools.gallery.pro.views.MediaSideScroll
adding class to to listTargetClass : pl.droidsonroids.gif.GifTextureView
adding class to to listTargetClass : com.alexvasilkov.gestures.GestureImageView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyTextInputLayout
adding class to to listTargetClass : com.google.vr.sdk.widgets.pano.VrPanoramaView
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyDialogViewPager
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyAutoCompleteTextView
adding class to to listTargetClass : h5.x$m
adding class to to listTargetClass : com.simplemobiletools.commons.views.MyAppCompatSpinner
preparing listTargetClass ... done
---------------------------------------------------------------------

CallGraph constructed 
-------------------------
com.simplemobiletools.commons.views.RenamePatternTab
<com.simplemobiletools.commons.views.RenamePatternTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)>
<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)>
<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)>
<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)>
<com.simplemobiletools.commons.views.RenamePatternTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)>
<com.simplemobiletools.commons.views.RenamePatternTab: com.simplemobiletools.commons.activities.BaseSimpleActivity getActivity()>
<com.simplemobiletools.commons.views.RenamePatternTab: int getCurrentIncrementalNumber()>
<com.simplemobiletools.commons.views.RenamePatternTab: boolean getIgnoreClicks()>
<com.simplemobiletools.commons.views.RenamePatternTab: int getNumbersCnt()>
<com.simplemobiletools.commons.views.RenamePatternTab: java.util.ArrayList getPaths()>
<com.simplemobiletools.commons.views.RenamePatternTab: boolean getStopLooping()>
<com.simplemobiletools.commons.views.RenamePatternTab: void initTab(com.simplemobiletools.commons.activities.BaseSimpleActivity,java.util.ArrayList)>
<com.simplemobiletools.commons.views.RenamePatternTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.RenamePatternTab: void setActivity(com.simplemobiletools.commons.activities.BaseSimpleActivity)>
<com.simplemobiletools.commons.views.RenamePatternTab: void setCurrentIncrementalNumber(int)>
<com.simplemobiletools.commons.views.RenamePatternTab: void setIgnoreClicks(boolean)>
<com.simplemobiletools.commons.views.RenamePatternTab: void setNumbersCnt(int)>
<com.simplemobiletools.commons.views.RenamePatternTab: void setPaths(java.util.ArrayList)>
<com.simplemobiletools.commons.views.RenamePatternTab: void setStopLooping(boolean)>
com.simplemobiletools.commons.views.MyAppCompatCheckbox
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)>
i4.a
<i4.a: void a()>
<i4.a: void b()>
<i4.a: void draw(android.graphics.Canvas)>
<i4.a: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()>
<i4.a: int getCircularRevealScrimColor()>
<i4.a: h4.d$e getRevealInfo()>
<i4.a: boolean isOpaque()>
<i4.a: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)>
<i4.a: void setCircularRevealScrimColor(int)>
<i4.a: void setRevealInfo(h4.d$e)>
com.simplemobiletools.commons.views.MyRecyclerView
<com.simplemobiletools.commons.views.MyRecyclerView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyRecyclerView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyRecyclerView: long access$getAUTO_SCROLL_DELAY$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: android.os.Handler access$getAutoScrollHandler$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: int access$getAutoScrollVelocity$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: float access$getCurrScaleFactor$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: boolean access$getInBottomHotspot$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: boolean access$getInTopHotspot$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: long access$getLastUp$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: com.simplemobiletools.commons.views.MyRecyclerView$MyZoomListener access$getZoomListener$p(com.simplemobiletools.commons.views.MyRecyclerView)>
<com.simplemobiletools.commons.views.MyRecyclerView: void access$setCurrScaleFactor$p(com.simplemobiletools.commons.views.MyRecyclerView,float)>
<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyRecyclerView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyRecyclerView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyRecyclerView: com.simplemobiletools.commons.views.MyRecyclerView$EndlessScrollListener getEndlessScrollListener()>
<com.simplemobiletools.commons.views.MyRecyclerView: com.simplemobiletools.commons.interfaces.RecyclerScrollCallback getRecyclerScrollCallback()>
<com.simplemobiletools.commons.views.MyRecyclerView: void onMeasure(int,int)>
<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollChanged(int,int,int,int)>
<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)>
<com.simplemobiletools.commons.views.MyRecyclerView: void resetItemCount()>
<com.simplemobiletools.commons.views.MyRecyclerView: void setDragSelectActive(int)>
<com.simplemobiletools.commons.views.MyRecyclerView: void setEndlessScrollListener(com.simplemobiletools.commons.views.MyRecyclerView$EndlessScrollListener)>
<com.simplemobiletools.commons.views.MyRecyclerView: void setRecyclerScrollCallback(com.simplemobiletools.commons.interfaces.RecyclerScrollCallback)>
<com.simplemobiletools.commons.views.MyRecyclerView: void setupDragListener(com.simplemobiletools.commons.views.MyRecyclerView$MyDragListener)>
<com.simplemobiletools.commons.views.MyRecyclerView: void setupZoomListener(com.simplemobiletools.commons.views.MyRecyclerView$MyZoomListener)>
com.theartofdev.edmodo.cropper.CropImageView
<com.theartofdev.edmodo.cropper.CropImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.theartofdev.edmodo.cropper.CropImageView: void a(com.theartofdev.edmodo.cropper.CropImageView,boolean,boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: com.theartofdev.edmodo.cropper.CropImageView$g b(com.theartofdev.edmodo.cropper.CropImageView)>
<com.theartofdev.edmodo.cropper.CropImageView: com.theartofdev.edmodo.cropper.CropImageView$f c(com.theartofdev.edmodo.cropper.CropImageView)>
<com.theartofdev.edmodo.cropper.CropImageView: void d(float,float,boolean,boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void f()>
<com.theartofdev.edmodo.cropper.CropImageView: int k(int,int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void l(boolean,boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void m()>
<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void s()>
<com.theartofdev.edmodo.cropper.CropImageView: void t()>
<com.theartofdev.edmodo.cropper.CropImageView: void v(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void e()>
<com.theartofdev.edmodo.cropper.CropImageView: void g()>
<com.theartofdev.edmodo.cropper.CropImageView: android.util.Pair getAspectRatio()>
<com.theartofdev.edmodo.cropper.CropImageView: float[] getCropPoints()>
<com.theartofdev.edmodo.cropper.CropImageView: android.graphics.Rect getCropRect()>
<com.theartofdev.edmodo.cropper.CropImageView: com.theartofdev.edmodo.cropper.CropImageView$c getCropShape()>
<com.theartofdev.edmodo.cropper.CropImageView: android.graphics.RectF getCropWindowRect()>
<com.theartofdev.edmodo.cropper.CropImageView: android.graphics.Bitmap getCroppedImage()>
<com.theartofdev.edmodo.cropper.CropImageView: void getCroppedImageAsync()>
<com.theartofdev.edmodo.cropper.CropImageView: com.theartofdev.edmodo.cropper.CropImageView$d getGuidelines()>
<com.theartofdev.edmodo.cropper.CropImageView: int getImageResource()>
<com.theartofdev.edmodo.cropper.CropImageView: android.net.Uri getImageUri()>
<com.theartofdev.edmodo.cropper.CropImageView: int getMaxZoom()>
<com.theartofdev.edmodo.cropper.CropImageView: int getRotatedDegrees()>
<com.theartofdev.edmodo.cropper.CropImageView: com.theartofdev.edmodo.cropper.CropImageView$k getScaleType()>
<com.theartofdev.edmodo.cropper.CropImageView: android.graphics.Rect getWholeImageRect()>
<com.theartofdev.edmodo.cropper.CropImageView: void h()>
<com.theartofdev.edmodo.cropper.CropImageView: android.graphics.Bitmap i(int,int,com.theartofdev.edmodo.cropper.CropImageView$j)>
<com.theartofdev.edmodo.cropper.CropImageView: void j(int,int,com.theartofdev.edmodo.cropper.CropImageView$j)>
<com.theartofdev.edmodo.cropper.CropImageView: void n(com.theartofdev.edmodo.cropper.a$a)>
<com.theartofdev.edmodo.cropper.CropImageView: void o(com.theartofdev.edmodo.cropper.b$a)>
<com.theartofdev.edmodo.cropper.CropImageView: void onLayout(boolean,int,int,int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void onMeasure(int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void onRestoreInstanceState(android.os.Parcelable)>
<com.theartofdev.edmodo.cropper.CropImageView: android.os.Parcelable onSaveInstanceState()>
<com.theartofdev.edmodo.cropper.CropImageView: void onSizeChanged(int,int,int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void p(int)>
<com.theartofdev.edmodo.cropper.CropImageView: void q(int,int)>
<com.theartofdev.edmodo.cropper.CropImageView: void setAutoZoomEnabled(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setCropRect(android.graphics.Rect)>
<com.theartofdev.edmodo.cropper.CropImageView: void setCropShape(com.theartofdev.edmodo.cropper.CropImageView$c)>
<com.theartofdev.edmodo.cropper.CropImageView: void setFixedAspectRatio(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setFlippedHorizontally(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setFlippedVertically(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setGuidelines(com.theartofdev.edmodo.cropper.CropImageView$d)>
<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)>
<com.theartofdev.edmodo.cropper.CropImageView: void setImageResource(int)>
<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)>
<com.theartofdev.edmodo.cropper.CropImageView: void setMaxZoom(int)>
<com.theartofdev.edmodo.cropper.CropImageView: void setMultiTouchEnabled(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setOnCropImageCompleteListener(com.theartofdev.edmodo.cropper.CropImageView$e)>
<com.theartofdev.edmodo.cropper.CropImageView: void setOnCropWindowChangedListener(com.theartofdev.edmodo.cropper.CropImageView$h)>
<com.theartofdev.edmodo.cropper.CropImageView: void setOnSetCropOverlayMovedListener(com.theartofdev.edmodo.cropper.CropImageView$f)>
<com.theartofdev.edmodo.cropper.CropImageView: void setOnSetCropOverlayReleasedListener(com.theartofdev.edmodo.cropper.CropImageView$g)>
<com.theartofdev.edmodo.cropper.CropImageView: void setOnSetImageUriCompleteListener(com.theartofdev.edmodo.cropper.CropImageView$i)>
<com.theartofdev.edmodo.cropper.CropImageView: void setRotatedDegrees(int)>
<com.theartofdev.edmodo.cropper.CropImageView: void setSaveBitmapToInstanceState(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setScaleType(com.theartofdev.edmodo.cropper.CropImageView$k)>
<com.theartofdev.edmodo.cropper.CropImageView: void setShowCropOverlay(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setShowProgressBar(boolean)>
<com.theartofdev.edmodo.cropper.CropImageView: void setSnapRadius(float)>
<com.theartofdev.edmodo.cropper.CropImageView: void u(int,int,com.theartofdev.edmodo.cropper.CropImageView$j,android.net.Uri,android.graphics.Bitmap$CompressFormat,int)>
com.simplemobiletools.commons.views.PatternTab
<com.simplemobiletools.commons.views.PatternTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.PatternTab: boolean a(com.simplemobiletools.commons.views.PatternTab,android.view.View,android.view.MotionEvent)>
<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)>
<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)>
<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)>
<com.simplemobiletools.commons.views.PatternTab: boolean onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PatternTab,android.view.View,android.view.MotionEvent)>
<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)>
<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)>
<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)>
<com.simplemobiletools.commons.views.PatternTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.PatternTab: com.simplemobiletools.commons.interfaces.HashListener getHashListener()>
<com.simplemobiletools.commons.views.PatternTab: void initTab(java.lang.String,com.simplemobiletools.commons.interfaces.HashListener,com.simplemobiletools.commons.views.MyScrollView,j.c,boolean)>
<com.simplemobiletools.commons.views.PatternTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.PatternTab: void setHashListener(com.simplemobiletools.commons.interfaces.HashListener)>
<com.simplemobiletools.commons.views.PatternTab: void visibilityChanged(boolean)>
com.simplemobiletools.commons.views.LineColorPicker
<com.simplemobiletools.commons.views.LineColorPicker: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.LineColorPicker: boolean _init_$lambda-0(com.simplemobiletools.commons.views.LineColorPicker,android.view.View,android.view.MotionEvent)>
<com.simplemobiletools.commons.views.LineColorPicker: boolean a(com.simplemobiletools.commons.views.LineColorPicker,android.view.View,android.view.MotionEvent)>
<com.simplemobiletools.commons.views.LineColorPicker: int access$getColorsCount$p(com.simplemobiletools.commons.views.LineColorPicker)>
<com.simplemobiletools.commons.views.LineColorPicker: int access$getLastColorIndex$p(com.simplemobiletools.commons.views.LineColorPicker)>
<com.simplemobiletools.commons.views.LineColorPicker: int access$getPickerWidth$p(com.simplemobiletools.commons.views.LineColorPicker)>
<com.simplemobiletools.commons.views.LineColorPicker: boolean access$getWasInit$p(com.simplemobiletools.commons.views.LineColorPicker)>
<com.simplemobiletools.commons.views.LineColorPicker: void access$initColorPicker(com.simplemobiletools.commons.views.LineColorPicker)>
<com.simplemobiletools.commons.views.LineColorPicker: void access$setPickerWidth$p(com.simplemobiletools.commons.views.LineColorPicker,int)>
<com.simplemobiletools.commons.views.LineColorPicker: void access$setStripeWidth$p(com.simplemobiletools.commons.views.LineColorPicker,int)>
<com.simplemobiletools.commons.views.LineColorPicker: void access$setWasInit$p(com.simplemobiletools.commons.views.LineColorPicker,boolean)>
<com.simplemobiletools.commons.views.LineColorPicker: void access$updateItemMargin(com.simplemobiletools.commons.views.LineColorPicker,int,boolean)>
<com.simplemobiletools.commons.views.LineColorPicker: void initColorPicker()>
<com.simplemobiletools.commons.views.LineColorPicker: void touchAt(int)>
<com.simplemobiletools.commons.views.LineColorPicker: void updateColors$default(com.simplemobiletools.commons.views.LineColorPicker,java.util.ArrayList,int,int,java.lang.Object)>
<com.simplemobiletools.commons.views.LineColorPicker: void updateItemMargin(int,boolean)>
<com.simplemobiletools.commons.views.LineColorPicker: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.LineColorPicker: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.LineColorPicker: int getCurrentColor()>
<com.simplemobiletools.commons.views.LineColorPicker: com.simplemobiletools.commons.interfaces.LineColorPickerListener getListener()>
<com.simplemobiletools.commons.views.LineColorPicker: void setListener(com.simplemobiletools.commons.interfaces.LineColorPickerListener)>
<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)>
com.simplemobiletools.commons.views.MyFloatingActionButton
<com.simplemobiletools.commons.views.MyFloatingActionButton: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyFloatingActionButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyFloatingActionButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyFloatingActionButton: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyFloatingActionButton: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)>
com.google.vr.sdk.widgets.video.VrVideoView
<com.google.vr.sdk.widgets.video.VrVideoView: void <clinit>()>
<com.google.vr.sdk.widgets.video.VrVideoView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.google.vr.sdk.widgets.video.VrVideoView: java.lang.String access$000()>
<com.google.vr.sdk.widgets.video.VrVideoView: com.google.vr.sdk.widgets.common.VrWidgetRenderer createRenderer(android.content.Context,com.google.vr.sdk.widgets.common.VrWidgetRenderer$GLThreadScheduler,float,float)>
<com.google.vr.sdk.widgets.video.VrVideoView: com.google.vr.sdk.widgets.video.VrVideoRenderer createRenderer(android.content.Context,com.google.vr.sdk.widgets.common.VrWidgetRenderer$GLThreadScheduler,float,float)>
<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()>
<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()>
<com.google.vr.sdk.widgets.video.VrVideoView: void lambda$createRenderer$0$VrVideoView()>
<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)>
<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()>
<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()>
<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()>
<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)>
<com.google.vr.sdk.widgets.video.VrVideoView: void setEventListener(com.google.vr.sdk.widgets.video.VrVideoEventListener)>
<com.google.vr.sdk.widgets.video.VrVideoView: void setMediaDataSourceFactory(com.google.vr.sdk.widgets.video.deps.nr$a)>
<com.google.vr.sdk.widgets.video.VrVideoView: void setVolume(float)>
com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void <clinit>()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuCallback access$getCallback$p(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void access$setCurrentAnimator$p(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.ViewPropertyAnimator)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void animateChildTo(int,long,android.animation.TimeInterpolator,boolean)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void animateChildTo$default(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,int,long,android.animation.TimeInterpolator,boolean,int,java.lang.Object)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void b(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: boolean c(android.widget.ImageView,java.lang.String,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: int computeMaxItemsBeforeOverflow()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: boolean d(android.widget.ImageView,com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawNormalItem(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawNormalItem$lambda-10$lambda-8(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: boolean drawNormalItem$lambda-10$lambda-9(android.widget.ImageView,com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem(java.util.List)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: boolean drawOverflowItem$lambda-13$lambda-12(android.widget.ImageView,java.lang.String,android.view.View)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: java.util.List getItems()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItemPopup getOverflowPopup(java.util.List)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void init()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void setItem(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void setupItem(android.widget.ImageView,com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void slideDownToGone()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void slideUpToVisible()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void add(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuItem)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void hide()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void setCallback(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuCallback)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void setup(java.util.List)>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void show()>
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void toggleItemVisibility(int,boolean)>
com.simplemobiletools.commons.views.MyCompatRadioButton
<com.simplemobiletools.commons.views.MyCompatRadioButton: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyCompatRadioButton: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyCompatRadioButton: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)>
com.duolingo.open.rtlviewpager.b
<com.duolingo.open.rtlviewpager.b: void <init>(android.content.Context)>
<com.duolingo.open.rtlviewpager.b: void <init>(android.content.Context,android.util.AttributeSet)>
<com.duolingo.open.rtlviewpager.b: androidx.viewpager.widget.a access$401(com.duolingo.open.rtlviewpager.b)>
<com.duolingo.open.rtlviewpager.b: boolean access$500(com.duolingo.open.rtlviewpager.b)>
<com.duolingo.open.rtlviewpager.b: androidx.viewpager.widget.a access$601(com.duolingo.open.rtlviewpager.b)>
<com.duolingo.open.rtlviewpager.b: boolean isRtl()>
<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)>
<com.duolingo.open.rtlviewpager.b: void clearOnPageChangeListeners()>
<com.duolingo.open.rtlviewpager.b: androidx.viewpager.widget.a getAdapter()>
<com.duolingo.open.rtlviewpager.b: int getCurrentItem()>
<com.duolingo.open.rtlviewpager.b: void onMeasure(int,int)>
<com.duolingo.open.rtlviewpager.b: void onRestoreInstanceState(android.os.Parcelable)>
<com.duolingo.open.rtlviewpager.b: void onRtlPropertiesChanged(int)>
<com.duolingo.open.rtlviewpager.b: android.os.Parcelable onSaveInstanceState()>
<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)>
<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)>
<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)>
<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)>
<com.duolingo.open.rtlviewpager.b: void setOnPageChangeListener(androidx.viewpager.widget.b$j)>
com.simplemobiletools.commons.views.MyEditText
<com.simplemobiletools.commons.views.MyEditText: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyEditText: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyEditText: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyEditText: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyEditText: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)>
h4.b
<h4.b: void a()>
<h4.b: void b()>
<h4.b: void draw(android.graphics.Canvas)>
<h4.b: android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()>
<h4.b: int getCircularRevealScrimColor()>
<h4.b: h4.d$e getRevealInfo()>
<h4.b: boolean isOpaque()>
<h4.b: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)>
<h4.b: void setCircularRevealScrimColor(int)>
<h4.b: void setRevealInfo(h4.d$e)>
h5.w
<h5.w: void <init>(android.content.Context)>
<h5.w: void a(h5.w,boolean)>
<h5.w: int b(h5.w,int)>
<h5.w: boolean c(h5.w)>
<h5.w: void d(h5.w)>
<h5.w: boolean e(int)>
<h5.w: boolean f(int)>
<h5.w: java.lang.Runnable g(h5.w)>
<h5.w: java.lang.Runnable h(h5.w)>
<h5.w: void i(boolean)>
<h5.w: void j(int)>
<h5.w: boolean k(int)>
<h5.w: boolean l(int)>
<h5.w: boolean m(int)>
<h5.w: void n()>
<h5.w: void o()>
<h5.w: void p()>
<h5.w: void q()>
<h5.w: void onAttachedToWindow()>
<h5.w: void onDetachedFromWindow()>
<h5.w: boolean onTouch(android.view.View,android.view.MotionEvent)>
<h5.w: void setBackButtonListener(java.lang.Runnable)>
<h5.w: void setTransitionListener(java.lang.Runnable)>
<h5.w: void setViewerName(java.lang.String)>
<h5.w: void setVisibility(int)>
x4.b
x4.a
com.simplemobiletools.commons.views.MyScrollView
<com.simplemobiletools.commons.views.MyScrollView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyScrollView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyScrollView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyScrollView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyScrollView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyScrollView: boolean isScrollable()>
<com.simplemobiletools.commons.views.MyScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyScrollView: boolean onTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyScrollView: void setScrollable(boolean)>
com.alexvasilkov.gestures.GestureFrameLayout
<com.alexvasilkov.gestures.GestureFrameLayout: void <clinit>()>
<com.alexvasilkov.gestures.GestureFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.alexvasilkov.gestures.GestureFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.alexvasilkov.gestures.GestureFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.g)>
<com.alexvasilkov.gestures.GestureFrameLayout: void a(com.alexvasilkov.gestures.GestureFrameLayout,v0.i)>
<com.alexvasilkov.gestures.GestureFrameLayout: android.view.MotionEvent b(android.view.MotionEvent,android.graphics.Matrix)>
<com.alexvasilkov.gestures.GestureFrameLayout: void c(v0.i)>
<com.alexvasilkov.gestures.GestureFrameLayout: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<com.alexvasilkov.gestures.GestureFrameLayout: void dispatchDraw(android.graphics.Canvas)>
<com.alexvasilkov.gestures.GestureFrameLayout: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.alexvasilkov.gestures.GestureFrameLayout: v0.b getController()>
<com.alexvasilkov.gestures.GestureFrameLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>
<com.alexvasilkov.gestures.GestureFrameLayout: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.alexvasilkov.gestures.GestureFrameLayout: void onMeasure(int,int)>
<com.alexvasilkov.gestures.GestureFrameLayout: void onSizeChanged(int,int,int,int)>
<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)>
<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)>
g4.a
<g4.a: void <clinit>()>
<g4.a: void <init>(android.content.Context,android.util.AttributeSet)>
<g4.a: void <init>(android.content.Context,android.util.AttributeSet,int)>
<g4.a: android.content.res.ColorStateList getMaterialThemeColorsTintList()>
<g4.a: void onAttachedToWindow()>
<g4.a: void onDraw(android.graphics.Canvas)>
<g4.a: void setCenterIfNoTextEnabled(boolean)>
<g4.a: void setUseMaterialThemeColors(boolean)>
l.a
<l.a: void <clinit>()>
<l.a: void <init>(android.content.Context,android.util.AttributeSet)>
<l.a: void <init>(android.content.Context,android.util.AttributeSet,int)>
<l.a: void c(l.a,int,int,int,int)>
<l.a: void d(int,int,int,int)>
<l.a: android.content.res.ColorStateList getCardBackgroundColor()>
<l.a: float getCardElevation()>
<l.a: int getContentPaddingBottom()>
<l.a: int getContentPaddingLeft()>
<l.a: int getContentPaddingRight()>
<l.a: int getContentPaddingTop()>
<l.a: float getMaxCardElevation()>
<l.a: boolean getPreventCornerOverlap()>
<l.a: float getRadius()>
<l.a: boolean getUseCompatPadding()>
<l.a: void onMeasure(int,int)>
<l.a: void setCardBackgroundColor(int)>
<l.a: void setCardBackgroundColor(android.content.res.ColorStateList)>
<l.a: void setCardElevation(float)>
<l.a: void setMaxCardElevation(float)>
<l.a: void setMinimumHeight(int)>
<l.a: void setMinimumWidth(int)>
<l.a: void setPadding(int,int,int,int)>
<l.a: void setPaddingRelative(int,int,int,int)>
<l.a: void setPreventCornerOverlap(boolean)>
<l.a: void setRadius(float)>
<l.a: void setUseCompatPadding(boolean)>
com.google.vr.sdk.widgets.common.VrWidgetView
<com.google.vr.sdk.widgets.common.VrWidgetView: void <clinit>()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.google.vr.sdk.widgets.common.VrWidgetView: com.google.vr.sdk.widgets.common.VrWidgetRenderer access$000(com.google.vr.sdk.widgets.common.VrWidgetView)>
<com.google.vr.sdk.widgets.common.VrWidgetView: com.google.vr.sdk.widgets.common.VrEventListener access$100(com.google.vr.sdk.widgets.common.VrWidgetView)>
<com.google.vr.sdk.widgets.common.VrWidgetView: android.opengl.GLSurfaceView access$200(com.google.vr.sdk.widgets.common.VrWidgetView)>
<com.google.vr.sdk.widgets.common.VrWidgetView: android.app.Activity access$300(com.google.vr.sdk.widgets.common.VrWidgetView)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void checkContextIsActivity(android.content.Context)>
<com.google.vr.sdk.widgets.common.VrWidgetView: android.content.Intent getInfoButtonIntent()>
<com.google.vr.sdk.widgets.common.VrWidgetView: int getScreenRotationInDegrees(int)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void init()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void initializeRenderingView()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void initializeUiButtons()>
<com.google.vr.sdk.widgets.common.VrWidgetView: boolean isFullScreen()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateButtonVisibility()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateTouchTracker()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()>
<com.google.vr.sdk.widgets.common.VrWidgetView: com.google.vr.sdk.widgets.common.VrWidgetRenderer createRenderer(android.content.Context,com.google.vr.sdk.widgets.common.VrWidgetRenderer$GLThreadScheduler,float,float)>
<com.google.vr.sdk.widgets.common.VrWidgetView: int getDisplayMode()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void onDetachedFromWindow()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void onRestoreInstanceState(android.os.Parcelable)>
<com.google.vr.sdk.widgets.common.VrWidgetView: android.os.Parcelable onSaveInstanceState()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setEventListener(com.google.vr.sdk.widgets.common.VrEventListener)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setFlingingEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setFullscreenButtonEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setInfoButtonEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setOnTouchListener(android.view.View$OnTouchListener)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setPureTouchTracking(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setStereoModeButtonEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setTouchTrackingEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void setTransitionViewEnabled(boolean)>
<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()>
com.simplemobiletools.commons.views.MyButton
<com.simplemobiletools.commons.views.MyButton: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyButton: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyButton: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyButton: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyButton: void setColors(int,int,int)>
com.simplemobiletools.commons.views.Breadcrumbs
<com.simplemobiletools.commons.views.Breadcrumbs: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)>
<com.simplemobiletools.commons.views.Breadcrumbs: android.widget.LinearLayout access$getItemsLayout$p(com.simplemobiletools.commons.views.Breadcrumbs)>
<com.simplemobiletools.commons.views.Breadcrumbs: void access$setStickyRootInitialLeft$p(com.simplemobiletools.commons.views.Breadcrumbs,int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)>
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)>
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)>
<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)>
<com.simplemobiletools.commons.views.Breadcrumbs: void freeRoot()>
<com.simplemobiletools.commons.views.Breadcrumbs: android.content.res.ColorStateList getTextColorStateList()>
<com.simplemobiletools.commons.views.Breadcrumbs: void handleRootStickiness(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void recomputeStickyRootLocation(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void scrollToSelectedItem()>
<com.simplemobiletools.commons.views.Breadcrumbs: void stickRoot(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.Breadcrumbs: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: com.simplemobiletools.commons.models.FileDirItem getItem(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: int getItemCount()>
<com.simplemobiletools.commons.views.Breadcrumbs: com.simplemobiletools.commons.models.FileDirItem getLastItem()>
<com.simplemobiletools.commons.views.Breadcrumbs: com.simplemobiletools.commons.views.Breadcrumbs$BreadcrumbsListener getListener()>
<com.simplemobiletools.commons.views.Breadcrumbs: boolean isShownInDialog()>
<com.simplemobiletools.commons.views.Breadcrumbs: void onLayout(boolean,int,int,int,int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void onMeasure(int,int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void onScrollChanged(int,int,int,int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void removeBreadcrumb()>
<com.simplemobiletools.commons.views.Breadcrumbs: void requestLayout()>
<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)>
<com.simplemobiletools.commons.views.Breadcrumbs: void setListener(com.simplemobiletools.commons.views.Breadcrumbs$BreadcrumbsListener)>
<com.simplemobiletools.commons.views.Breadcrumbs: void setShownInDialog(boolean)>
<com.simplemobiletools.commons.views.Breadcrumbs: void updateColor(int)>
<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)>
com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void <clinit>()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void <init>(android.content.Context)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void <init>(android.content.Context,android.util.AttributeSet,int,kotlin.jvm.internal.g)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$debug(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,java.lang.String)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$fileSRect(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.Rect,android.graphics.Rect)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$Anim access$getAnim$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF access$getCenter(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: double access$getCos$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: java.util.concurrent.locks.ReentrantReadWriteLock access$getDecoderLock$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: double access$getImageRotation$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF access$getQuickScaleSCenter$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: double access$getSin$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: java.lang.String access$getTAG$cp()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF access$getVCenterStart$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF access$getVTranslate$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean access$isReady$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean access$isZooming$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF access$limitedSCenter(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,float,float,float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$onImageLoaded(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.Bitmap,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$onTileLoaded(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$onTilesInited(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,com.davemorrissey.labs.subscaleview.ImageRegionDecoder,int,int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setAnim$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$Anim)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setGestureDetector(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.content.Context)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaleLastDistance$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaleMoved$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaleSCenter$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaleVLastPoint$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaleVStart$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setQuickScaling$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setScaleStart$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setVCenterStart$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setVTranslateStart$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void access$setZooming$p(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void animateToBounds$default(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,boolean,int,java.lang.Object)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int calculateInSampleSize(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean checkImageLoaded()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean checkReady()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void createPaints()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void debug(java.lang.String)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float distance(float,float,float,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void doubleTapZoom(android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float ease(int,long,float,float,long,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float easeInOutQuad(long,float,float,long)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float easeOutQuad(long,float,float,long)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void execute(android.os.AsyncTask)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void fileSRect(android.graphics.Rect,android.graphics.Rect)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void fitToBounds(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$ScaleTranslateRotate)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF getCenter()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: double getClosestRightAngle(double)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getFullScale()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean getIsBaseLayerReady()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.Point getMaxBitmapDimensions(android.graphics.Canvas)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int getRequiredRotation()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getRotatedFullScale()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void initialiseBaseLayer(android.graphics.Point)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void initialiseTileMap(android.graphics.Point)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF limitedSCenter(float,float,float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float limitedScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onImageLoaded(android.graphics.Bitmap,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onTileLoaded()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onTilesInited(com.davemorrissey.labs.subscaleview.ImageRegionDecoder,int,int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void preDraw()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int px(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int sHeight()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int sWidth()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setGestureDetector(android.content.Context)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMatrixArray(float[],float,float,float,float,float,float,float,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setRotationInternal(double)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord(float,float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord$default(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,float,float,android.graphics.PointF,int,java.lang.Object)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void sourceToViewRect(android.graphics.Rect,android.graphics.Rect)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float sourceToViewX(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float sourceToViewY(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean tileVisible(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$Tile)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF vTranslateForSCenter(float,float,float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(float,float,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord$default(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView,float,float,android.graphics.PointF,int,java.lang.Object)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float viewToSourceX(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float viewToSourceY(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void animateToBounds(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void fitToBounds()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: com.davemorrissey.labs.subscaleview.DecoderFactory getBitmapDecoderFactory()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean getDebug()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getDoubleTapZoomScale()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean getEagerLoadingEnabled()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getMaxScale()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$OnImageEventListener getOnImageEventListener()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int getOrientation()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: com.davemorrissey.labs.subscaleview.DecoderFactory getRegionDecoderFactory()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean getRotationEnabled()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int getSHeight()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: int getSWidth()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: float getScale()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean isOneToOneZoomEnabled()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean isZoomedOut()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onDraw(android.graphics.Canvas)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onMeasure(int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onReady()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void onSizeChanged(int,int,int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void resetView()>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void rotateBy(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setBitmapDecoderFactory(com.davemorrissey.labs.subscaleview.DecoderFactory)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setDebug(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setDoubleTapZoomDpi(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setDoubleTapZoomScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setEagerLoadingEnabled(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMaxScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMaxTileSize(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMaxTileSize(int,int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumDpi(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setOnImageEventListener(com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView$OnImageEventListener)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setOneToOneZoomEnabled(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setOrientation(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setRegionDecoderFactory(com.davemorrissey.labs.subscaleview.DecoderFactory)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setRotationEnabled(boolean)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setSHeight(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setSWidth(int)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setScale(float)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord(android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF sourceToViewCoord(android.graphics.PointF,android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(android.graphics.PointF)>
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: android.graphics.PointF viewToSourceCoord(android.graphics.PointF,android.graphics.PointF)>
com.simplemobiletools.commons.views.MySearchMenu
<com.simplemobiletools.commons.views.MySearchMenu: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MySearchMenu: void a(com.simplemobiletools.commons.views.MySearchMenu,android.view.View,boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)>
<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)>
<com.simplemobiletools.commons.views.MySearchMenu: void openSearch()>
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)>
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)>
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2$lambda-1(com.simplemobiletools.commons.views.MySearchMenu,android.view.View,boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()>
<com.simplemobiletools.commons.views.MySearchMenu: void focusView()>
<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()>
<com.simplemobiletools.commons.views.MySearchMenu: c7.a getOnNavigateBackClickListener()>
<com.simplemobiletools.commons.views.MySearchMenu: c7.a getOnSearchClosedListener()>
<com.simplemobiletools.commons.views.MySearchMenu: c7.a getOnSearchOpenListener()>
<com.simplemobiletools.commons.views.MySearchMenu: c7.l getOnSearchTextChangedListener()>
<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()>
<com.simplemobiletools.commons.views.MySearchMenu: boolean getUseArrowIcon()>
<com.simplemobiletools.commons.views.MySearchMenu: boolean isSearchOpen()>
<com.simplemobiletools.commons.views.MySearchMenu: void setOnNavigateBackClickListener(c7.a)>
<com.simplemobiletools.commons.views.MySearchMenu: void setOnSearchClosedListener(c7.a)>
<com.simplemobiletools.commons.views.MySearchMenu: void setOnSearchOpenListener(c7.a)>
<com.simplemobiletools.commons.views.MySearchMenu: void setOnSearchTextChangedListener(c7.l)>
<com.simplemobiletools.commons.views.MySearchMenu: void setSearchOpen(boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void setUseArrowIcon(boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()>
<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)>
<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()>
<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)>
com.simplemobiletools.commons.views.MyViewPager
<com.simplemobiletools.commons.views.MyViewPager: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyViewPager: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyViewPager: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyViewPager: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)>
com.andrognito.patternlockview.PatternLockView
<com.andrognito.patternlockview.PatternLockView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)>
<com.andrognito.patternlockview.PatternLockView: void B()>
<com.andrognito.patternlockview.PatternLockView: void C()>
<com.andrognito.patternlockview.PatternLockView: void D()>
<com.andrognito.patternlockview.PatternLockView: void E()>
<com.andrognito.patternlockview.PatternLockView: void F()>
<com.andrognito.patternlockview.PatternLockView: void G()>
<com.andrognito.patternlockview.PatternLockView: int H(int,int)>
<com.andrognito.patternlockview.PatternLockView: void I(int)>
<com.andrognito.patternlockview.PatternLockView: void K(com.andrognito.patternlockview.PatternLockView$f)>
<com.andrognito.patternlockview.PatternLockView: void L(com.andrognito.patternlockview.PatternLockView$g,float,float,float,float)>
<com.andrognito.patternlockview.PatternLockView: void M(float,float,long,android.view.animation.Interpolator,com.andrognito.patternlockview.PatternLockView$g,java.lang.Runnable)>
<com.andrognito.patternlockview.PatternLockView: int a(com.andrognito.patternlockview.PatternLockView)>
<com.andrognito.patternlockview.PatternLockView: int b(com.andrognito.patternlockview.PatternLockView)>
<com.andrognito.patternlockview.PatternLockView: int c(com.andrognito.patternlockview.PatternLockView)>
<com.andrognito.patternlockview.PatternLockView: android.view.animation.Interpolator d(com.andrognito.patternlockview.PatternLockView)>
<com.andrognito.patternlockview.PatternLockView: void e(com.andrognito.patternlockview.PatternLockView,float,float,long,android.view.animation.Interpolator,com.andrognito.patternlockview.PatternLockView$g,java.lang.Runnable)>
<com.andrognito.patternlockview.PatternLockView: int f()>
<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)>
<com.andrognito.patternlockview.PatternLockView: float i(float,float,float,float)>
<com.andrognito.patternlockview.PatternLockView: void j()>
<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f k(float,float)>
<com.andrognito.patternlockview.PatternLockView: void m()>
<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)>
<com.andrognito.patternlockview.PatternLockView: void o(android.graphics.Canvas,float,float,float,boolean,float)>
<com.andrognito.patternlockview.PatternLockView: float p(int)>
<com.andrognito.patternlockview.PatternLockView: float q(int)>
<com.andrognito.patternlockview.PatternLockView: int r(float)>
<com.andrognito.patternlockview.PatternLockView: int s(boolean)>
<com.andrognito.patternlockview.PatternLockView: int t(float)>
<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)>
<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)>
<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)>
<com.andrognito.patternlockview.PatternLockView: void x()>
<com.andrognito.patternlockview.PatternLockView: void y()>
<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)>
<com.andrognito.patternlockview.PatternLockView: void J(int,java.util.List)>
<com.andrognito.patternlockview.PatternLockView: int getAspectRatio()>
<com.andrognito.patternlockview.PatternLockView: int getCorrectStateColor()>
<com.andrognito.patternlockview.PatternLockView: int getDotAnimationDuration()>
<com.andrognito.patternlockview.PatternLockView: int getDotCount()>
<com.andrognito.patternlockview.PatternLockView: int getDotNormalSize()>
<com.andrognito.patternlockview.PatternLockView: int getDotSelectedSize()>
<com.andrognito.patternlockview.PatternLockView: int getNormalStateColor()>
<com.andrognito.patternlockview.PatternLockView: int getPathEndAnimationDuration()>
<com.andrognito.patternlockview.PatternLockView: int getPathWidth()>
<com.andrognito.patternlockview.PatternLockView: java.util.List getPattern()>
<com.andrognito.patternlockview.PatternLockView: int getPatternSize()>
<com.andrognito.patternlockview.PatternLockView: int getPatternViewMode()>
<com.andrognito.patternlockview.PatternLockView: int getWrongStateColor()>
<com.andrognito.patternlockview.PatternLockView: void h(x0.a)>
<com.andrognito.patternlockview.PatternLockView: void l()>
<com.andrognito.patternlockview.PatternLockView: void onDraw(android.graphics.Canvas)>
<com.andrognito.patternlockview.PatternLockView: boolean onHoverEvent(android.view.MotionEvent)>
<com.andrognito.patternlockview.PatternLockView: void onMeasure(int,int)>
<com.andrognito.patternlockview.PatternLockView: void onRestoreInstanceState(android.os.Parcelable)>
<com.andrognito.patternlockview.PatternLockView: android.os.Parcelable onSaveInstanceState()>
<com.andrognito.patternlockview.PatternLockView: void onSizeChanged(int,int,int,int)>
<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)>
<com.andrognito.patternlockview.PatternLockView: void setAspectRatio(int)>
<com.andrognito.patternlockview.PatternLockView: void setAspectRatioEnabled(boolean)>
<com.andrognito.patternlockview.PatternLockView: void setCorrectStateColor(int)>
<com.andrognito.patternlockview.PatternLockView: void setDotAnimationDuration(int)>
<com.andrognito.patternlockview.PatternLockView: void setDotCount(int)>
<com.andrognito.patternlockview.PatternLockView: void setDotNormalSize(int)>
<com.andrognito.patternlockview.PatternLockView: void setDotSelectedSize(int)>
<com.andrognito.patternlockview.PatternLockView: void setEnableHapticFeedback(boolean)>
<com.andrognito.patternlockview.PatternLockView: void setInStealthMode(boolean)>
<com.andrognito.patternlockview.PatternLockView: void setInputEnabled(boolean)>
<com.andrognito.patternlockview.PatternLockView: void setNormalStateColor(int)>
<com.andrognito.patternlockview.PatternLockView: void setPathEndAnimationDuration(int)>
<com.andrognito.patternlockview.PatternLockView: void setPathWidth(int)>
<com.andrognito.patternlockview.PatternLockView: void setTactileFeedbackEnabled(boolean)>
<com.andrognito.patternlockview.PatternLockView: void setViewMode(int)>
<com.andrognito.patternlockview.PatternLockView: void setWrongStateColor(int)>
com.simplemobiletools.commons.views.MySeekBar
<com.simplemobiletools.commons.views.MySeekBar: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MySeekBar: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MySeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MySeekBar: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MySeekBar: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)>
com.theartofdev.edmodo.cropper.CropOverlayView
<com.theartofdev.edmodo.cropper.CropOverlayView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.theartofdev.edmodo.cropper.CropOverlayView: com.theartofdev.edmodo.cropper.f a(com.theartofdev.edmodo.cropper.CropOverlayView)>
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean b(android.graphics.RectF)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void c(boolean)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void d(android.graphics.Canvas)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void e(android.graphics.Canvas)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void f(android.graphics.Canvas)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void g(android.graphics.Canvas)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void h(android.graphics.RectF)>
<com.theartofdev.edmodo.cropper.CropOverlayView: android.graphics.Paint j(int)>
<com.theartofdev.edmodo.cropper.CropOverlayView: android.graphics.Paint k(float,int)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void l()>
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean n()>
<com.theartofdev.edmodo.cropper.CropOverlayView: void o(float,float)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void p(float,float)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void q()>
<com.theartofdev.edmodo.cropper.CropOverlayView: int getAspectRatioX()>
<com.theartofdev.edmodo.cropper.CropOverlayView: int getAspectRatioY()>
<com.theartofdev.edmodo.cropper.CropOverlayView: com.theartofdev.edmodo.cropper.CropImageView$c getCropShape()>
<com.theartofdev.edmodo.cropper.CropOverlayView: android.graphics.RectF getCropWindowRect()>
<com.theartofdev.edmodo.cropper.CropOverlayView: com.theartofdev.edmodo.cropper.CropImageView$d getGuidelines()>
<com.theartofdev.edmodo.cropper.CropOverlayView: android.graphics.Rect getInitialCropWindowRect()>
<com.theartofdev.edmodo.cropper.CropOverlayView: void i()>
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean m()>
<com.theartofdev.edmodo.cropper.CropOverlayView: void onDraw(android.graphics.Canvas)>
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void r()>
<com.theartofdev.edmodo.cropper.CropOverlayView: void s(float[],int,int)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setAspectRatioX(int)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setAspectRatioY(int)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setCropShape(com.theartofdev.edmodo.cropper.CropImageView$c)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setCropWindowChangeListener(com.theartofdev.edmodo.cropper.CropOverlayView$b)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setCropWindowRect(android.graphics.RectF)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setFixedAspectRatio(boolean)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setGuidelines(com.theartofdev.edmodo.cropper.CropImageView$d)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setInitialAttributeValues(com.theartofdev.edmodo.cropper.e)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setInitialCropWindowRect(android.graphics.Rect)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void setSnapRadius(float)>
<com.theartofdev.edmodo.cropper.CropOverlayView: void t(float,float,float,float)>
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean u(boolean)>
com.google.vr.ndk.base.GvrLayout
<com.google.vr.ndk.base.GvrLayout: boolean enableAsyncReprojectionProtected()>
<com.google.vr.ndk.base.GvrLayout: android.view.Surface getAsyncReprojectionVideoSurface()>
<com.google.vr.ndk.base.GvrLayout: int getAsyncReprojectionVideoSurfaceId()>
<com.google.vr.ndk.base.GvrLayout: com.google.vr.ndk.base.GvrApi getGvrApi()>
<com.google.vr.ndk.base.GvrLayout: com.google.vr.ndk.base.GvrUiLayout getUiLayout()>
<com.google.vr.ndk.base.GvrLayout: void onPause()>
<com.google.vr.ndk.base.GvrLayout: void onResume()>
<com.google.vr.ndk.base.GvrLayout: boolean setAsyncReprojectionEnabled(boolean)>
<com.google.vr.ndk.base.GvrLayout: void setPresentationView(android.view.View)>
<com.google.vr.ndk.base.GvrLayout: void setReentryIntent(android.app.PendingIntent)>
<com.google.vr.ndk.base.GvrLayout: void setStereoModeEnabled(boolean)>
<com.google.vr.ndk.base.GvrLayout: void shutdown()>
com.simplemobiletools.commons.views.MyTextView
<com.simplemobiletools.commons.views.MyTextView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyTextView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyTextView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyTextView: void setColors(int,int,int)>
com.simplemobiletools.commons.views.MySquareImageView
<com.simplemobiletools.commons.views.MySquareImageView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MySquareImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MySquareImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MySquareImageView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MySquareImageView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MySquareImageView: boolean isHorizontalScrolling()>
<com.simplemobiletools.commons.views.MySquareImageView: void onMeasure(int,int)>
<com.simplemobiletools.commons.views.MySquareImageView: void setHorizontalScrolling(boolean)>
q4.a
<q4.a: void <clinit>()>
<q4.a: void <init>(android.content.Context,android.util.AttributeSet)>
<q4.a: void <init>(android.content.Context,android.util.AttributeSet,int)>
<q4.a: android.content.res.ColorStateList getMaterialThemeColorsTintList()>
<q4.a: void onAttachedToWindow()>
<q4.a: void setUseMaterialThemeColors(boolean)>
com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void <clinit>()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void <init>(android.content.Context,android.util.AttributeSet)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.g)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void A()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean C()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int D(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.graphics.drawable.Drawable E(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void F(java.lang.String)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void H(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void I(android.view.View,float)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void J(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean K(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,android.view.MotionEvent)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void L(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void M(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,int,int,java.lang.Object)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void N()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void O(androidx.recyclerview.widget.RecyclerView,int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void P()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void R(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void a(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void b(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean c(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,android.view.MotionEvent)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: androidx.appcompat.widget.AppCompatImageView f(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: float g(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: float getHandleLength()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: float getPopupLength()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: float getTrackLength()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int h(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.widget.LinearLayout i(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean j(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void l(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void m(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void n(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void o()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void p()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void q()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void r()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int v(androidx.recyclerview.widget.RecyclerView,float)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void x()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int z(androidx.recyclerview.widget.LinearLayoutManager)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean B()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void attachFastScrollerToRecyclerView(androidx.recyclerview.widget.RecyclerView)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: boolean getCalculateScrollPositionManually()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller$c getFastScrollDirection()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getFullContentHeight()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.graphics.drawable.Drawable getHandleDrawable()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getHandleHeight()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getHandleVisibilityDuration()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getHandleWidth()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.graphics.drawable.Drawable getPopupDrawable()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.widget.TextView getPopupTextView()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getTextStyle()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: android.graphics.drawable.Drawable getTrackDrawable()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getTrackMarginEnd()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int getTrackMarginStart()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void onDetachedFromWindow()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void onFinishInflate()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setCalculateScrollPositionManually(boolean)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setFastScrollDirection(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller$c)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setFastScrollEnabled(boolean)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setFullContentHeight(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setHandleDrawable(android.graphics.drawable.Drawable)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setHandleHeight(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setHandleStateListener(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller$HandleStateListener)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setHandleVisibilityDuration(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setHandleWidth(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setPopupDrawable(android.graphics.drawable.Drawable)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setPopupTextView(android.widget.TextView)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setScrollVertically(boolean)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setTextStyle(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setTrackDrawable(android.graphics.drawable.Drawable)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setTrackMarginEnd(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void setTrackMarginStart(int)>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void w()>
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: int y(int)>
com.simplemobiletools.gallery.pro.views.EditorDrawCanvas
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void actionDown(float,float)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void actionMove(float,float)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void actionUp()>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void changePaint(com.simplemobiletools.gallery.pro.models.PaintOptions)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: android.graphics.Bitmap getBitmap()>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void onDraw(android.graphics.Canvas)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: boolean onTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void updateBackgroundBitmap(android.graphics.Bitmap)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void updateBrushSize(int)>
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void updateColor(int)>
com.simplemobiletools.gallery.pro.views.InstantItemSwitch
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: android.view.ViewGroup getParentView()>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: void setParentView(android.view.ViewGroup)>
com.simplemobiletools.commons.views.FingerprintTab
<com.simplemobiletools.commons.views.FingerprintTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)>
<com.simplemobiletools.commons.views.FingerprintTab: void b(com.simplemobiletools.commons.views.FingerprintTab,android.view.View)>
<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()>
<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)>
<com.simplemobiletools.commons.views.FingerprintTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.FingerprintTab,android.view.View)>
<com.simplemobiletools.commons.views.FingerprintTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.FingerprintTab: com.simplemobiletools.commons.interfaces.HashListener getHashListener()>
<com.simplemobiletools.commons.views.FingerprintTab: void initTab(java.lang.String,com.simplemobiletools.commons.interfaces.HashListener,com.simplemobiletools.commons.views.MyScrollView,j.c,boolean)>
<com.simplemobiletools.commons.views.FingerprintTab: void onDetachedFromWindow()>
<com.simplemobiletools.commons.views.FingerprintTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.FingerprintTab: void setHashListener(com.simplemobiletools.commons.interfaces.HashListener)>
<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)>
com.simplemobiletools.commons.views.BiometricIdTab
<com.simplemobiletools.commons.views.BiometricIdTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)>
<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)>
<com.simplemobiletools.commons.views.BiometricIdTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.BiometricIdTab: void initTab(java.lang.String,com.simplemobiletools.commons.interfaces.HashListener,com.simplemobiletools.commons.views.MyScrollView,j.c,boolean)>
<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.BiometricIdTab: void visibilityChanged(boolean)>
com.simplemobiletools.commons.views.ColorPickerSquare
<com.simplemobiletools.commons.views.ColorPickerSquare: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.ColorPickerSquare: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.ColorPickerSquare: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.ColorPickerSquare: float[] getColor()>
<com.simplemobiletools.commons.views.ColorPickerSquare: android.graphics.Shader getLuar()>
<com.simplemobiletools.commons.views.ColorPickerSquare: android.graphics.Paint getPaint()>
<com.simplemobiletools.commons.views.ColorPickerSquare: void onDraw(android.graphics.Canvas)>
<com.simplemobiletools.commons.views.ColorPickerSquare: void setHue(float)>
<com.simplemobiletools.commons.views.ColorPickerSquare: void setLuar(android.graphics.Shader)>
<com.simplemobiletools.commons.views.ColorPickerSquare: void setPaint(android.graphics.Paint)>
com.simplemobiletools.commons.views.RenameSimpleTab
<com.simplemobiletools.commons.views.RenameSimpleTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)>
<com.simplemobiletools.commons.views.RenameSimpleTab: com.simplemobiletools.commons.activities.BaseSimpleActivity getActivity()>
<com.simplemobiletools.commons.views.RenameSimpleTab: boolean getIgnoreClicks()>
<com.simplemobiletools.commons.views.RenameSimpleTab: java.util.ArrayList getPaths()>
<com.simplemobiletools.commons.views.RenameSimpleTab: boolean getStopLooping()>
<com.simplemobiletools.commons.views.RenameSimpleTab: void initTab(com.simplemobiletools.commons.activities.BaseSimpleActivity,java.util.ArrayList)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.RenameSimpleTab: void setActivity(com.simplemobiletools.commons.activities.BaseSimpleActivity)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void setIgnoreClicks(boolean)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void setPaths(java.util.ArrayList)>
<com.simplemobiletools.commons.views.RenameSimpleTab: void setStopLooping(boolean)>
com.simplemobiletools.commons.views.PinTab
<com.simplemobiletools.commons.views.PinTab: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)>
<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void clear()>
<com.simplemobiletools.commons.views.PinTab: void confirmPIN()>
<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: java.lang.String getHashedPin()>
<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)>
<com.simplemobiletools.commons.views.PinTab: void resetPin()>
<com.simplemobiletools.commons.views.PinTab: void updatePinCode()>
<com.simplemobiletools.commons.views.PinTab: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.PinTab: com.simplemobiletools.commons.interfaces.HashListener getHashListener()>
<com.simplemobiletools.commons.views.PinTab: void initTab(java.lang.String,com.simplemobiletools.commons.interfaces.HashListener,com.simplemobiletools.commons.views.MyScrollView,j.c,boolean)>
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate()>
<com.simplemobiletools.commons.views.PinTab: void setHashListener(com.simplemobiletools.commons.interfaces.HashListener)>
<com.simplemobiletools.commons.views.PinTab: void visibilityChanged(boolean)>
com.simplemobiletools.gallery.pro.views.MediaSideScroll
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void a(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: c7.p access$getDoubleTap$p(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: c7.p access$getSingleTap$p(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void access$setMViewHeight$p(com.simplemobiletools.gallery.pro.views.MediaSideScroll,int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void b(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void brightnessPercentChanged(int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void brightnessPercentChanged$lambda-1(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: int getCurrentBrightness()>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: int getCurrentVolume()>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void initialize$default(com.simplemobiletools.gallery.pro.views.MediaSideScroll,android.app.Activity,android.widget.TextView,boolean,android.view.ViewGroup,c7.p,c7.p,int,java.lang.Object)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void percentChanged(int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void showValue(int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void volumePercentChanged(int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void volumePercentChanged$lambda-0(com.simplemobiletools.gallery.pro.views.MediaSideScroll)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean dispatchTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void initialize(android.app.Activity,android.widget.TextView,boolean,android.view.ViewGroup,c7.p,c7.p)>
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)>
pl.droidsonroids.gif.GifTextureView
<pl.droidsonroids.gif.GifTextureView: void <clinit>()>
<pl.droidsonroids.gif.GifTextureView: void <init>(android.content.Context,android.util.AttributeSet)>
<pl.droidsonroids.gif.GifTextureView: pl.droidsonroids.gif.h a(pl.droidsonroids.gif.GifTextureView)>
<pl.droidsonroids.gif.GifTextureView: pl.droidsonroids.gif.g$a b(pl.droidsonroids.gif.GifTextureView)>
<pl.droidsonroids.gif.GifTextureView: void c(pl.droidsonroids.gif.GifTextureView,android.view.TextureView$SurfaceTextureListener)>
<pl.droidsonroids.gif.GifTextureView: void d(pl.droidsonroids.gif.GifTextureView,pl.droidsonroids.gif.GifInfoHandle)>
<pl.droidsonroids.gif.GifTextureView: float e(pl.droidsonroids.gif.GifTextureView)>
<pl.droidsonroids.gif.GifTextureView: pl.droidsonroids.gif.h f(android.content.res.TypedArray)>
<pl.droidsonroids.gif.GifTextureView: void g(android.util.AttributeSet,int,int)>
<pl.droidsonroids.gif.GifTextureView: void i(pl.droidsonroids.gif.GifInfoHandle)>
<pl.droidsonroids.gif.GifTextureView: void setSuperSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>
<pl.droidsonroids.gif.GifTextureView: java.io.IOException getIOException()>
<pl.droidsonroids.gif.GifTextureView: android.widget.ImageView$ScaleType getScaleType()>
<pl.droidsonroids.gif.GifTextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>
<pl.droidsonroids.gif.GifTextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>
<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)>
<pl.droidsonroids.gif.GifTextureView: void onDetachedFromWindow()>
<pl.droidsonroids.gif.GifTextureView: void onRestoreInstanceState(android.os.Parcelable)>
<pl.droidsonroids.gif.GifTextureView: android.os.Parcelable onSaveInstanceState()>
<pl.droidsonroids.gif.GifTextureView: void setFreezesAnimation(boolean)>
<pl.droidsonroids.gif.GifTextureView: void setImageMatrix(android.graphics.Matrix)>
<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)>
<pl.droidsonroids.gif.GifTextureView: void setOpaque(boolean)>
<pl.droidsonroids.gif.GifTextureView: void setScaleType(android.widget.ImageView$ScaleType)>
<pl.droidsonroids.gif.GifTextureView: void setSpeed(float)>
<pl.droidsonroids.gif.GifTextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>
<pl.droidsonroids.gif.GifTextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>
<pl.droidsonroids.gif.GifTextureView: void setTransform(android.graphics.Matrix)>
com.alexvasilkov.gestures.GestureImageView
<com.alexvasilkov.gestures.GestureImageView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.alexvasilkov.gestures.GestureImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.alexvasilkov.gestures.GestureImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int,kotlin.jvm.internal.g)>
<com.alexvasilkov.gestures.GestureImageView: void a(com.alexvasilkov.gestures.GestureImageView,v0.i)>
<com.alexvasilkov.gestures.GestureImageView: void b(v0.i)>
<com.alexvasilkov.gestures.GestureImageView: v0.b getController()>
<com.alexvasilkov.gestures.GestureImageView: void onSizeChanged(int,int,int,int)>
<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)>
<com.alexvasilkov.gestures.GestureImageView: void setController(v0.b)>
<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
com.simplemobiletools.commons.views.MyTextInputLayout
<com.simplemobiletools.commons.views.MyTextInputLayout: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyTextInputLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyTextInputLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyTextInputLayout: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyTextInputLayout: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)>
com.google.vr.sdk.widgets.pano.VrPanoramaView
<com.google.vr.sdk.widgets.pano.VrPanoramaView: void <clinit>()>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: java.lang.String access$000()>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: com.google.vr.sdk.widgets.common.VrWidgetRenderer createRenderer(android.content.Context,com.google.vr.sdk.widgets.common.VrWidgetRenderer$GLThreadScheduler,float,float)>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: com.google.vr.sdk.widgets.pano.VrPanoramaRenderer createRenderer(android.content.Context,com.google.vr.sdk.widgets.common.VrWidgetRenderer$GLThreadScheduler,float,float)>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: void loadImageFromBitmap(android.graphics.Bitmap,com.google.vr.sdk.widgets.pano.VrPanoramaView$Options)>
<com.google.vr.sdk.widgets.pano.VrPanoramaView: void setEventListener(com.google.vr.sdk.widgets.pano.VrPanoramaEventListener)>
com.simplemobiletools.commons.views.MyDialogViewPager
<com.simplemobiletools.commons.views.MyDialogViewPager: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyDialogViewPager: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyDialogViewPager: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyDialogViewPager: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyDialogViewPager: boolean getAllowSwiping()>
<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyDialogViewPager: void onMeasure(int,int)>
<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)>
<com.simplemobiletools.commons.views.MyDialogViewPager: void setAllowSwiping(boolean)>
com.simplemobiletools.commons.views.MyAutoCompleteTextView
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)>
h5.x$m
<h5.x$m: void <init>(h5.x,android.content.Context)>
<h5.x$m: void a(android.content.res.Configuration)>
<h5.x$m: void onAttachedToWindow()>
<h5.x$m: void onConfigurationChanged(android.content.res.Configuration)>
com.simplemobiletools.commons.views.MyAppCompatSpinner
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void <init>(android.content.Context)>
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet)>
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void _$_clearFindViewByIdCache()>
<com.simplemobiletools.commons.views.MyAppCompatSpinner: android.view.View _$_findCachedViewById(int)>
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)>
-------------------------
1 start
2 start
3 start
4 start
5 start
6 start
7 start
8 start
9 start
10 start
11 start
12 start
13 start
14 start
15 start
16 start
17 start
18 start
19 start
20 start
21 start
22 start
23 start
24 start
25 start
Thread done24
25 start
26 start
27 start
28 start
29 start
30 start
31 start
Thread done30
31 start
Thread done30
Thread done29
30 start
31 start
Thread done30
31 start
32 start
33 start
Thread done32
Thread done31
Thread done30
Thread done29
Thread done28
Thread done27
Thread done26
Thread done25
Thread done24
Thread done23
Thread done22
Thread done21
22 start
Thread done21
Thread done20
Thread done19
Thread done18
Thread done17
Thread done16
Thread done15
Thread done14
Thread done13
Thread done12
13 start
14 start
Thread done13
14 start
Thread done13
Thread done12
13 start
Thread done12
Thread done11
Thread done10
Thread done9
Thread done8
9 start
Thread done8
9 start
Thread done8
9 start
10 start
11 start
Thread done10
Thread done9
10 start
Thread done9
10 start
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
13 start
14 start
Thread done13
Thread done12
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.theartofdev.edmodo.cropper.CropImageView: void a(com.theartofdev.edmodo.cropper.CropImageView,boolean,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropImageView: void d(float,float,boolean,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
Thread done10
11 start
12 start
Thread done11
12 start
13 start
<com.theartofdev.edmodo.cropper.CropImageView: void l(boolean,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done12
13 start
Thread done12
<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyRecyclerView: void onScrollStateChanged(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
13 start
Thread done12
Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void g()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void h()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void p(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyRecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenamePatternTab,java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyAppCompatCheckbox: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyRecyclerView: int getItemPosition(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String getNewPath(java.lang.String,boolean)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void r(android.graphics.Bitmap,int,android.net.Uri,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: void renameAllFiles(java.util.List,boolean,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenamePatternTab: java.lang.String access$getNewPath(com.simplemobiletools.commons.views.RenamePatternTab,java.lang.String,boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.ImageView: void setImageResource(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.TextView: void setTextColor(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropImageView: void f()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void access$receivedHash(com.simplemobiletools.commons.views.PatternTab,java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void b(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.ImageView: void setImageResource(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.TextView: void setTextColor(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageBitmap(android.graphics.Bitmap)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void c(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash(java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-2(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.ImageView: void setImageResource(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.TextView: void setTextColor(int)>

<com.theartofdev.edmodo.cropper.CropImageView: void setImageUriAsync(android.net.Uri)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.PatternTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
13 start
Thread done12
Thread done11
12 start
Thread done11
<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PatternTab: void receivedHash$lambda-1(com.simplemobiletools.commons.views.PatternTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.LineColorPicker: void updateColors(java.util.ArrayList,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getCurrentPosition()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: long getDuration()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyFloatingActionButton: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseRendering()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: void pauseVideo()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: void loadVideo(android.net.Uri,com.google.vr.sdk.widgets.video.VrVideoView$Options)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: void playVideo()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyCompatRadioButton: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.video.VrVideoView: void seekTo(long)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
<h5.w: void setViewerName(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void a(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView: void drawOverflowItem$lambda-13$lambda-11(com.simplemobiletools.commons.views.bottomactionmenu.BottomActionMenuView,android.view.View)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
13 start
Thread done12
<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: void addOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: void removeOnPageChangeListener(androidx.viewpager.widget.b$j)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
13 start
<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: int getCurrentItem()> to <android.widget.TextView: void setText(int)>

Thread done12
<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: void setAdapter(androidx.viewpager.widget.a)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.duolingo.open.rtlviewpager.b: void setCurrentItem(int,boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyEditText: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<h5.w: void j(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<h5.w: void j(int)> to <android.widget.ImageView: void setImageResource(int)>

<h5.w: void j(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<h5.w: void j(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<h5.w: void j(int)> to <android.widget.TextView: void setTextColor(int)>

<h5.w: void j(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<h5.w: void j(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateStereoMode()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateControlsLayout()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void updateViewerName()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.alexvasilkov.gestures.GestureFrameLayout: void requestDisallowInterceptTouchEvent(boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
13 start
Thread done12
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void resumeRendering()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void shutdown()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.alexvasilkov.gestures.GestureFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void pauseRendering()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void a(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.TextView: void setTextColor(int)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.google.vr.sdk.widgets.common.VrWidgetView: void setDisplayMode(int)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb(com.simplemobiletools.commons.models.FileDirItem,int,boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-2$lambda-1(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void b(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void addBreadcrumb$lambda-4$lambda-3(com.simplemobiletools.commons.views.Breadcrumbs,int,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void reset(boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void refreshRequiredTiles(boolean)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.Breadcrumbs: void updateFontSize(float,boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEventInternal(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.Breadcrumbs: void setBreadcrumb(java.lang.String)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void recycle()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setImage(java.lang.String)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-2(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void b(com.simplemobiletools.commons.views.MySearchMenu)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu$lambda-0(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void c(com.simplemobiletools.commons.views.MySearchMenu,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.TextView: void setTextColor(int)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView: void setMinimumTileDpi(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: java.lang.String getCurrentQuery()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void focusView()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void closeSearch()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: com.google.android.material.appbar.MaterialToolbar getToolbar()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void setupMenu()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleHideOnScroll(boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void toggleForceArrowBackIcon(boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateHintText(java.lang.String)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySearchMenu: void updateColors()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void B()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void C()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void F()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.TextView: void setText(int)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void D()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void A(java.util.List)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropOverlayView: void c(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropOverlayView: void p(float,float)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropOverlayView: void q()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void E()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.theartofdev.edmodo.cropper.CropOverlayView: void setInitialCropWindowRect(android.graphics.Rect)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
<com.simplemobiletools.commons.views.MyTextView: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void u(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void v(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: com.andrognito.patternlockview.PatternLockView$f n(float,float)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void g(com.andrognito.patternlockview.PatternLockView$f)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
13 start
Thread done12
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.TextView: void setText(int)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void z(java.util.List)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void w(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.andrognito.patternlockview.PatternLockView: void y()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MySeekBar: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
12 start
13 start
<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.andrognito.patternlockview.PatternLockView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done12
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void e(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.theartofdev.edmodo.cropper.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void s(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void d(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.TextView: void setText(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void G(float)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void u(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,android.view.View,boolean,int,java.lang.Object)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.FingerprintTab: void a(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void Q(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
Thread done11
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void t(android.view.View,boolean)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.gallery.pro.views.EditorDrawCanvas: void undo()> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.gallery.pro.views.InstantItemSwitch: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.ImageView: void setImageResource(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.TextView: void setTextColor(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.TextView: void setText(int)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller: void k(com.qtalk.recyclerviewfastscroller.RecyclerViewFastScroller,float)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.FingerprintTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void visibilityChanged(boolean)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.BiometricIdTab: void b(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.FingerprintTab: void checkRegisteredFingerprints$lambda-1(com.simplemobiletools.commons.views.FingerprintTab)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.BiometricIdTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.BiometricIdTab,android.view.View)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.BiometricIdTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void access$renameAllFiles(com.simplemobiletools.commons.views.RenameSimpleTab,java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void renameAllFiles(java.util.List,boolean,java.lang.String,com.simplemobiletools.commons.models.Android30RenameFormat,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenameSimpleTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void a(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void clear()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void confirmPIN()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void c(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.RenameSimpleTab: void dialogConfirmed(boolean,c7.l)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void b(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void addNumber(java.lang.String)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void e(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void g(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void f(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void d(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void i(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void k(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void l(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void j(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void h(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-0(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-10(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-11(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-4(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-1(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void brightnessPercentChanged(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void showValue(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

Thread done11
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void percentChanged(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

Thread done10
11 start
12 start
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: void volumePercentChanged(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-3(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-6(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-2(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
<com.alexvasilkov.gestures.GestureImageView: void a(com.alexvasilkov.gestures.GestureImageView,v0.i)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
<com.alexvasilkov.gestures.GestureImageView: void b(v0.i)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

12 start
Thread done11
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-5(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-8(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-7(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.PinTab: void resetPin()> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
12 start
Thread done11
<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.PinTab: android.view.View _$_findCachedViewById(int)> to <android.widget.TextView: void setText(int)>

Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
Thread done10
11 start
main Thread waiting : 11
<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void onFinishInflate$lambda-9(com.simplemobiletools.commons.views.PinTab,android.view.View)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done10
<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.ImageView: void setImageResource(int)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.TextView: void setTextColor(int)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<pl.droidsonroids.gif.GifTextureView: void setInputSource(pl.droidsonroids.gif.h)> to <android.widget.TextView: void setText(int)>

Thread done9
<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.alexvasilkov.gestures.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done8
<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.TextView: void setText(int)>

<com.simplemobiletools.commons.views.PinTab: void updatePinCode()> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

Thread done7
<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.ImageView: void setImageResource(int)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.TextView: void setTextColor(int)>

<com.alexvasilkov.gestures.GestureImageView: void setImageDrawable(android.graphics.drawable.Drawable)> to <android.widget.TextView: void setText(int)>

Thread done6
<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.ImageView: void setImageResource(int)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.TextView: void setTextColor(int)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<pl.droidsonroids.gif.GifTextureView: void h(pl.droidsonroids.gif.h,pl.droidsonroids.gif.GifTextureView$b)> to <android.widget.TextView: void setText(int)>

Thread done5
<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyAutoCompleteTextView: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done4
<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyDialogViewPager: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done3
<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.gallery.pro.views.MediaSideScroll: boolean onTouchEvent(android.view.MotionEvent)> to <android.widget.TextView: void setText(int)>

Thread done2
<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyTextInputLayout: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done1
<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.TextView: void setText(java.lang.CharSequence)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.ImageView: void setImageResource(int)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.TextView: void setTextColor(int)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>

<com.simplemobiletools.commons.views.MyAppCompatSpinner: void setColors(int,int,int)> to <android.widget.TextView: void setText(int)>

Thread done0
thread Execution complete
StaticAnalysis Complete!!

BUILD SUCCESSFUL in 3h 24m 41s
2 actionable tasks: 1 executed, 1 up-to-date
