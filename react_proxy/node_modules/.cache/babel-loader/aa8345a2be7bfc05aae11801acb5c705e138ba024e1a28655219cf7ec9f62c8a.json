{"ast":null,"code":"'use strict';\n\nimport Socket from './Socket';\nimport Server from './Server';\n\n/**\n * @param {(socket: Socket) => void} connectionListener\n * @returns {Server}\n */\nfunction createServer(connectionListener) {\n  return new Server(connectionListener);\n}\n\n/**\n * @param {import('./Socket').ConnectionOptions} options\n * @param {() => void} callback\n * @returns {Socket}\n */\nfunction createConnection(options, callback) {\n  const tcpSocket = new Socket();\n  return tcpSocket.connect(options, callback);\n}\n\n// IPv4 Segment\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\n\n// IPv6 Segment\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\nconst IPv6Reg = new RegExp('^(' + `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` + `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` + `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` + `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` + `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` + `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` + `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` + `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` + ')(%[0-9a-zA-Z-.:]{1,})?$');\n\n/**\n * Returns `true` if input is a version 4 IP address, otherwise returns `false`.\n *\n * @param {string} input\n */\nfunction isIPv4(input) {\n  return IPv4Reg.test(input);\n}\n\n/**\n * Returns `true` if input is a version 6 IP address, otherwise returns `false`.\n *\n * @param {string} input\n */\nfunction isIPv6(input) {\n  return IPv6Reg.test(input);\n}\n\n/**\n * Tests if input is an IP address. Returns `0` for invalid strings, returns `4` for IP version 4 addresses, and returns `6` for IP version 6 addresses.\n *\n * @param {string} input\n */\nfunction isIP(input) {\n  if (isIPv4(input)) return 4;else if (isIPv6(input)) return 6;\n  return 0;\n}\nexport default {\n  createServer,\n  createConnection,\n  isIP,\n  isIPv4,\n  isIPv6,\n  Server,\n  Socket\n};\n\n// @ts-ignore\nmodule.exports = {\n  createServer,\n  createConnection,\n  isIP,\n  isIPv4,\n  isIPv6,\n  Server,\n  Socket\n};","map":{"version":3,"names":["Socket","Server","createServer","connectionListener","createConnection","options","callback","tcpSocket","connect","v4Seg","v4Str","IPv4Reg","RegExp","v6Seg","IPv6Reg","isIPv4","input","test","isIPv6","isIP","module","exports"],"sources":["/home/ywha/WEB_FLUID/react_proxy/node_modules/react-native-tcp-socket/src/index.js"],"sourcesContent":["'use strict';\n\nimport Socket from './Socket';\nimport Server from './Server';\n\n/**\n * @param {(socket: Socket) => void} connectionListener\n * @returns {Server}\n */\nfunction createServer(connectionListener) {\n    return new Server(connectionListener);\n}\n\n/**\n * @param {import('./Socket').ConnectionOptions} options\n * @param {() => void} callback\n * @returns {Socket}\n */\nfunction createConnection(options, callback) {\n    const tcpSocket = new Socket();\n    return tcpSocket.connect(options, callback);\n}\n\n// IPv4 Segment\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\n\n// IPv6 Segment\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\nconst IPv6Reg = new RegExp(\n    '^(' +\n        `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\n        `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\n        `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\n        `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\n        `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\n        `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\n        `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\n        `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\n        ')(%[0-9a-zA-Z-.:]{1,})?$'\n);\n\n/**\n * Returns `true` if input is a version 4 IP address, otherwise returns `false`.\n *\n * @param {string} input\n */\nfunction isIPv4(input) {\n    return IPv4Reg.test(input);\n}\n\n/**\n * Returns `true` if input is a version 6 IP address, otherwise returns `false`.\n *\n * @param {string} input\n */\nfunction isIPv6(input) {\n    return IPv6Reg.test(input);\n}\n\n/**\n * Tests if input is an IP address. Returns `0` for invalid strings, returns `4` for IP version 4 addresses, and returns `6` for IP version 6 addresses.\n *\n * @param {string} input\n */\nfunction isIP(input) {\n    if (isIPv4(input)) return 4;\n    else if (isIPv6(input)) return 6;\n    return 0;\n}\n\nexport default { createServer, createConnection, isIP, isIPv4, isIPv6, Server, Socket };\n\n// @ts-ignore\nmodule.exports = { createServer, createConnection, isIP, isIPv4, isIPv6, Server, Socket };\n"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,kBAAkB,EAAE;EACtC,OAAO,IAAIF,MAAM,CAACE,kBAAkB,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EACzC,MAAMC,SAAS,GAAG,IAAIP,MAAM,EAAE;EAC9B,OAAOO,SAAS,CAACC,OAAO,CAACH,OAAO,EAAEC,QAAQ,CAAC;AAC/C;;AAEA;AACA,MAAMG,KAAK,GAAG,sDAAsD;AACpE,MAAMC,KAAK,GAAI,IAAGD,KAAM,UAASA,KAAM,EAAC;AACxC,MAAME,OAAO,GAAG,IAAIC,MAAM,CAAE,IAAGF,KAAM,GAAE,CAAC;;AAExC;AACA,MAAMG,KAAK,GAAG,sBAAsB;AACpC,MAAMC,OAAO,GAAG,IAAIF,MAAM,CACtB,IAAI,GACC,MAAKC,KAAM,WAAUA,KAAM,MAAK,GAChC,MAAKA,KAAM,WAAUH,KAAM,KAAIG,KAAM,MAAK,GAC1C,MAAKA,KAAM,YAAWH,KAAM,MAAKG,KAAM,YAAW,GAClD,MAAKA,KAAM,aAAYA,KAAM,UAASH,KAAM,MAAKG,KAAM,YAAW,GAClE,MAAKA,KAAM,aAAYA,KAAM,UAASH,KAAM,MAAKG,KAAM,YAAW,GAClE,MAAKA,KAAM,aAAYA,KAAM,UAASH,KAAM,MAAKG,KAAM,YAAW,GAClE,MAAKA,KAAM,aAAYA,KAAM,UAASH,KAAM,MAAKG,KAAM,YAAW,GAClE,YAAWA,KAAM,UAASH,KAAM,QAAOG,KAAM,YAAW,GACzD,0BAA0B,CACjC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAACC,KAAK,EAAE;EACnB,OAAOL,OAAO,CAACM,IAAI,CAACD,KAAK,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAACF,KAAK,EAAE;EACnB,OAAOF,OAAO,CAACG,IAAI,CAACD,KAAK,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASG,IAAIA,CAACH,KAAK,EAAE;EACjB,IAAID,MAAM,CAACC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,KACvB,IAAIE,MAAM,CAACF,KAAK,CAAC,EAAE,OAAO,CAAC;EAChC,OAAO,CAAC;AACZ;AAEA,eAAe;EAAEd,YAAY;EAAEE,gBAAgB;EAAEe,IAAI;EAAEJ,MAAM;EAAEG,MAAM;EAAEjB,MAAM;EAAED;AAAO,CAAC;;AAEvF;AACAoB,MAAM,CAACC,OAAO,GAAG;EAAEnB,YAAY;EAAEE,gBAAgB;EAAEe,IAAI;EAAEJ,MAAM;EAAEG,MAAM;EAAEjB,MAAM;EAAED;AAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}