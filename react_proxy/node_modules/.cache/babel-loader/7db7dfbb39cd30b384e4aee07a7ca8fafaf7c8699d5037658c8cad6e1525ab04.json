{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport UIManager from '../../exports/UIManager';\nimport useStable from '../useStable';\n\n/**\n * Adds non-standard methods to the hode element. This is temporarily until an\n * API like `ReactNative.measure(hostRef, callback)` is added to React Native.\n */\nexport default function usePlatformMethods(_ref) {\n  _s();\n  var pointerEvents = _ref.pointerEvents,\n    style = _ref.style;\n  // Avoid creating a new ref on every render.\n  var ref = useStable(() => hostNode => {\n    if (hostNode != null) {\n      hostNode.measure = callback => UIManager.measure(hostNode, callback);\n      hostNode.measureLayout = (relativeToNode, success, failure) => UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n      hostNode.measureInWindow = callback => UIManager.measureInWindow(hostNode, callback);\n    }\n  });\n  return ref;\n}\n_s(usePlatformMethods, \"NnSUHJXovFcK3Nd3wvlHTUandbg=\", false, function () {\n  return [useStable];\n});","map":{"version":3,"names":["UIManager","useStable","usePlatformMethods","_ref","_s","pointerEvents","style","ref","hostNode","measure","callback","measureLayout","relativeToNode","success","failure","measureInWindow"],"sources":["/home/ywha/WEB_FLUID/react_proxy/src/node_modules/react-native-web/dist/modules/usePlatformMethods/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport UIManager from '../../exports/UIManager';\nimport useStable from '../useStable';\n\n/**\n * Adds non-standard methods to the hode element. This is temporarily until an\n * API like `ReactNative.measure(hostRef, callback)` is added to React Native.\n */\nexport default function usePlatformMethods(_ref) {\n  var pointerEvents = _ref.pointerEvents,\n    style = _ref.style;\n  // Avoid creating a new ref on every render.\n  var ref = useStable(() => hostNode => {\n    if (hostNode != null) {\n      hostNode.measure = callback => UIManager.measure(hostNode, callback);\n      hostNode.measureLayout = (relativeToNode, success, failure) => UIManager.measureLayout(hostNode, relativeToNode, failure, success);\n      hostNode.measureInWindow = callback => UIManager.measureInWindow(hostNode, callback);\n    }\n  });\n  return ref;\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,cAAc;;AAEpC;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAAAC,EAAA;EAC/C,IAAIC,aAAa,GAAGF,IAAI,CAACE,aAAa;IACpCC,KAAK,GAAGH,IAAI,CAACG,KAAK;EACpB;EACA,IAAIC,GAAG,GAAGN,SAAS,CAAC,MAAMO,QAAQ,IAAI;IACpC,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpBA,QAAQ,CAACC,OAAO,GAAGC,QAAQ,IAAIV,SAAS,CAACS,OAAO,CAACD,QAAQ,EAAEE,QAAQ,CAAC;MACpEF,QAAQ,CAACG,aAAa,GAAG,CAACC,cAAc,EAAEC,OAAO,EAAEC,OAAO,KAAKd,SAAS,CAACW,aAAa,CAACH,QAAQ,EAAEI,cAAc,EAAEE,OAAO,EAAED,OAAO,CAAC;MAClIL,QAAQ,CAACO,eAAe,GAAGL,QAAQ,IAAIV,SAAS,CAACe,eAAe,CAACP,QAAQ,EAAEE,QAAQ,CAAC;IACtF;EACF,CAAC,CAAC;EACF,OAAOH,GAAG;AACZ;AAACH,EAAA,CAZuBF,kBAAkB;EAAA,QAI9BD,SAAS;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}