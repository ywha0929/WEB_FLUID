{"ast":null,"code":"var _s = $RefreshSig$();\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport { warnOnce } from '../../modules/warnOnce';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((props, forwardedRef) => {\n  _s();\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey &&\n    // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n          selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  supportedProps.readOnly = readOnly === true || editable === false;\n  if (numberOfLines != null) {\n    warnOnce('numberOfLines', 'TextInput numberOfLines is deprecated. Use rows.');\n  }\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n}, \"dL5kQoNc+VO2Co2cKTcE85SiDMU=\", false, function () {\n  return [useElementLayout, useResponderEvents, useLocaleContext, usePlatformMethods, useMergeRefs];\n})), \"dL5kQoNc+VO2Co2cKTcE85SiDMU=\", false, function () {\n  return [useElementLayout, useResponderEvents, useLocaleContext, usePlatformMethods, useMergeRefs];\n});\n_c2 = TextInput;\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;\nvar _c, _c2;\n$RefreshReg$(_c, \"TextInput$React.forwardRef\");\n$RefreshReg$(_c2, \"TextInput\");","map":{"version":3,"names":["React","createElement","forwardedProps","pick","useElementLayout","useLayoutEffect","useMergeRefs","usePlatformMethods","useResponderEvents","getLocaleDirection","useLocaleContext","StyleSheet","TextInputState","warnOnce","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","Object","assign","defaultProps","accessibilityProps","clickProps","focusProps","keyboardProps","mouseProps","touchProps","styleProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","focusTimeout","TextInput","_s","forwardRef","_c","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","clearTextOnFocus","dir","editable","enterKeyHint","inputMode","keyboardType","_props$multiline","multiline","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","_props$readOnly","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","_inputMode","dimensions","useRef","height","width","hostRef","handleContentSizeChange","useCallback","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","current","contentSize","imperativeRef","useMemo","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","clearTimeout","setTimeout","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","document","activeElement","component","_useLocaleContext","contextDirection","direction","supportedProps","undefined","onKeyDown","onSelect","style","styles","textinput$raw","platformMethodsRef","setRef","ref","langDirection","componentDirection","writingDirection","element","_c2","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize","$RefreshReg$"],"sources":["/home/ywha/WEB_FLUID/react_proxy/src/node_modules/react-native-web/dist/exports/TextInput/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport { warnOnce } from '../../modules/warnOnce';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey &&\n    // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    if (onSelectionChange) {\n      try {\n        var node = e.target;\n        var selectionStart = node.selectionStart,\n          selectionEnd = node.selectionEnd;\n        e.nativeEvent.selection = {\n          start: selectionStart,\n          end: selectionEnd\n        };\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      } catch (e) {}\n    }\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  supportedProps.readOnly = readOnly === true || editable === false;\n  if (numberOfLines != null) {\n    warnOnce('numberOfLines', 'TextInput numberOfLines is deprecated. Use rows.');\n  }\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style];\n  supportedProps.type = multiline ? undefined : type;\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  }\n});\nexport default TextInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}