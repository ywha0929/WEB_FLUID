{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _canUseDom = _interopRequireDefault(require(\"../../modules/canUseDom\"));\n\nfunction isScreenReaderEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(true);\n  });\n}\n\nvar prefersReducedMotionMedia = _canUseDom.default && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\n\nfunction isReduceMotionEnabled() {\n  return new Promise(function (resolve, reject) {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\n\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\n\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\n\nvar handlers = {};\nvar AccessibilityInfo = {\n  isScreenReaderEnabled: isScreenReaderEnabled,\n  isReduceMotionEnabled: isReduceMotionEnabled,\n  fetch: isScreenReaderEnabled,\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n\n      var listener = function listener(event) {\n        handler(event.matches);\n      };\n\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n\n    return {\n      remove: function remove() {\n        return AccessibilityInfo.removeEventListener(eventName, handler);\n      }\n    };\n  },\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n\n      removeChangeListener(listener);\n    }\n\n    return;\n  }\n};\nvar _default = AccessibilityInfo;\nexports.default = _default;","map":{"version":3,"names":["isScreenReaderEnabled","Promise","resolve","reject","prefersReducedMotionMedia","canUseDOM","window","matchMedia","isReduceMotionEnabled","matches","addChangeListener","fn","addEventListener","addListener","removeChangeListener","removeEventListener","removeListener","handlers","AccessibilityInfo","fetch","eventName","handler","listener","event","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement"],"sources":["/home/ywha/WEB_FLUID/react_proxy/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport canUseDOM from '../../modules/canUseDom';\nfunction isScreenReaderEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(true);\n  });\n}\nvar prefersReducedMotionMedia = canUseDOM && typeof window.matchMedia === 'function' ? window.matchMedia('(prefers-reduced-motion: reduce)') : null;\nfunction isReduceMotionEnabled() {\n  return new Promise((resolve, reject) => {\n    resolve(prefersReducedMotionMedia ? prefersReducedMotionMedia.matches : true);\n  });\n}\nfunction addChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.addEventListener != null ? prefersReducedMotionMedia.addEventListener('change', fn) : prefersReducedMotionMedia.addListener(fn);\n  }\n}\nfunction removeChangeListener(fn) {\n  if (prefersReducedMotionMedia != null) {\n    prefersReducedMotionMedia.removeEventListener != null ? prefersReducedMotionMedia.removeEventListener('change', fn) : prefersReducedMotionMedia.removeListener(fn);\n  }\n}\nvar handlers = {};\nvar AccessibilityInfo = {\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isScreenReaderEnabled,\n  /**\n   * Query whether the user prefers reduced motion.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   */\n  isReduceMotionEnabled,\n  /**\n   * Deprecated\n   */\n  fetch: isScreenReaderEnabled,\n  /**\n   * Add an event handler. Supported events: reduceMotionChanged\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      if (!prefersReducedMotionMedia) {\n        return;\n      }\n      var listener = event => {\n        handler(event.matches);\n      };\n      addChangeListener(listener);\n      handlers[handler] = listener;\n    }\n    return {\n      remove: () => AccessibilityInfo.removeEventListener(eventName, handler)\n    };\n  },\n  /**\n   * Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n  /**\n   * Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    if (eventName === 'reduceMotionChanged') {\n      var listener = handlers[handler];\n      if (!listener || !prefersReducedMotionMedia) {\n        return;\n      }\n      removeChangeListener(listener);\n    }\n    return;\n  }\n};\nexport default AccessibilityInfo;"],"mappings":";;;;;;;AAQA;;AACA,SAASA,qBAAT,GAAiC;EAC/B,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCD,OAAO,CAAC,IAAD,CAAP;EACD,CAFM,CAAP;AAGD;;AACD,IAAIE,yBAAyB,GAAGC,kBAAA,IAAa,OAAOC,MAAM,CAACC,UAAd,KAA6B,UAA1C,GAAuDD,MAAM,CAACC,UAAP,CAAkB,kCAAlB,CAAvD,GAA+G,IAA/I;;AACA,SAASC,qBAAT,GAAiC;EAC/B,OAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCD,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB,CAACK,OAA7B,GAAuC,IAAjE,CAAP;EACD,CAFM,CAAP;AAGD;;AACD,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;EAC7B,IAAIP,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACQ,gBAA1B,IAA8C,IAA9C,GAAqDR,yBAAyB,CAACQ,gBAA1B,CAA2C,QAA3C,EAAqDD,EAArD,CAArD,GAAgHP,yBAAyB,CAACS,WAA1B,CAAsCF,EAAtC,CAAhH;EACD;AACF;;AACD,SAASG,oBAAT,CAA8BH,EAA9B,EAAkC;EAChC,IAAIP,yBAAyB,IAAI,IAAjC,EAAuC;IACrCA,yBAAyB,CAACW,mBAA1B,IAAiD,IAAjD,GAAwDX,yBAAyB,CAACW,mBAA1B,CAA8C,QAA9C,EAAwDJ,EAAxD,CAAxD,GAAsHP,yBAAyB,CAACY,cAA1B,CAAyCL,EAAzC,CAAtH;EACD;AACF;;AACD,IAAIM,QAAQ,GAAG,EAAf;AACA,IAAIC,iBAAiB,GAAG;EAOtBlB,qBAAqB,EAArBA,qBAPsB;EActBQ,qBAAqB,EAArBA,qBAdsB;EAkBtBW,KAAK,EAAEnB,qBAlBe;EAsBtBY,gBAAgB,EAAE,SAASA,gBAAT,CAA0BQ,SAA1B,EAAqCC,OAArC,EAA8C;IAC9D,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAI,CAAChB,yBAAL,EAAgC;QAC9B;MACD;;MACD,IAAIkB,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;QACtBF,OAAO,CAACE,KAAK,CAACd,OAAP,CAAP;MACD,CAFD;;MAGAC,iBAAiB,CAACY,QAAD,CAAjB;MACAL,QAAQ,CAACI,OAAD,CAAR,GAAoBC,QAApB;IACD;;IACD,OAAO;MACLE,MAAM,EAAE;QAAA,OAAMN,iBAAiB,CAACH,mBAAlB,CAAsCK,SAAtC,EAAiDC,OAAjD,CAAN;MAAA;IADH,CAAP;EAGD,CApCqB;EAwCtBI,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CAxC5C;EA4CtBC,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CA5CtD;EAgDtBb,mBAAmB,EAAE,SAASA,mBAAT,CAA6BK,SAA7B,EAAwCC,OAAxC,EAAiD;IACpE,IAAID,SAAS,KAAK,qBAAlB,EAAyC;MACvC,IAAIE,QAAQ,GAAGL,QAAQ,CAACI,OAAD,CAAvB;;MACA,IAAI,CAACC,QAAD,IAAa,CAAClB,yBAAlB,EAA6C;QAC3C;MACD;;MACDU,oBAAoB,CAACQ,QAAD,CAApB;IACD;;IACD;EACD;AAzDqB,CAAxB;eA2DeJ,iB"},"metadata":{},"sourceType":"script"}