{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CellRenderMask = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar CellRenderMask = function () {\n  function CellRenderMask(numCells) {\n    (0, _classCallCheck2.default)(this, CellRenderMask);\n    (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [{\n        first: 0,\n        last: numCells - 1,\n        isSpacer: true\n      }];\n    }\n  }\n\n  (0, _createClass2.default)(CellRenderMask, [{\n    key: \"enumerateRegions\",\n    value: function enumerateRegions() {\n      return this._regions;\n    }\n  }, {\n    key: \"addCells\",\n    value: function addCells(cells) {\n      var _this$_regions;\n\n      (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n      if (cells.last < cells.first) {\n        return;\n      }\n\n      var _this$_findRegion = this._findRegion(cells.first),\n          firstIntersect = _this$_findRegion[0],\n          firstIntersectIdx = _this$_findRegion[1];\n\n      var _this$_findRegion2 = this._findRegion(cells.last),\n          lastIntersect = _this$_findRegion2[0],\n          lastIntersectIdx = _this$_findRegion2[1];\n\n      if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n        return;\n      }\n\n      var newLeadRegion = [];\n      var newTailRegion = [];\n      var newMainRegion = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cells), {}, {\n        isSpacer: false\n      });\n\n      if (firstIntersect.first < newMainRegion.first) {\n        if (firstIntersect.isSpacer) {\n          newLeadRegion.push({\n            first: firstIntersect.first,\n            last: newMainRegion.first - 1,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.first = firstIntersect.first;\n        }\n      }\n\n      if (lastIntersect.last > newMainRegion.last) {\n        if (lastIntersect.isSpacer) {\n          newTailRegion.push({\n            first: newMainRegion.last + 1,\n            last: lastIntersect.last,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.last = lastIntersect.last;\n        }\n      }\n\n      var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n      var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n\n      (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));\n    }\n  }, {\n    key: \"numCells\",\n    value: function numCells() {\n      return this._numCells;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n        return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n      });\n    }\n  }, {\n    key: \"_findRegion\",\n    value: function _findRegion(cellIdx) {\n      var firstIdx = 0;\n      var lastIdx = this._regions.length - 1;\n\n      while (firstIdx <= lastIdx) {\n        var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var middleRegion = this._regions[middleIdx];\n\n        if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n          return [middleRegion, middleIdx];\n        } else if (cellIdx < middleRegion.first) {\n          lastIdx = middleIdx - 1;\n        } else if (cellIdx > middleRegion.last) {\n          firstIdx = middleIdx + 1;\n        }\n      }\n\n      (0, _invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n    }\n  }]);\n  return CellRenderMask;\n}();\n\nexports.CellRenderMask = CellRenderMask;","map":{"version":3,"names":["CellRenderMask","numCells","invariant","_numCells","_regions","first","last","isSpacer","cells","_this$_findRegion","_findRegion","firstIntersect","firstIntersectIdx","_this$_findRegion2","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","_objectSpread","push","replacementRegions","numRegionsToDelete","splice","other","length","every","region","i","cellIdx","firstIdx","lastIdx","middleIdx","Math","floor","middleRegion"],"sources":["/home/ywha/WEB_FLUID/react_proxy/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/CellRenderMask.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\nimport invariant from 'fbjs/lib/invariant';\nexport class CellRenderMask {\n  constructor(numCells) {\n    invariant(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n    this._numCells = numCells;\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [{\n        first: 0,\n        last: numCells - 1,\n        isSpacer: true\n      }];\n    }\n  }\n  enumerateRegions() {\n    return this._regions;\n  }\n  addCells(cells) {\n    invariant(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n    var _this$_findRegion = this._findRegion(cells.first),\n      firstIntersect = _this$_findRegion[0],\n      firstIntersectIdx = _this$_findRegion[1];\n    var _this$_findRegion2 = this._findRegion(cells.last),\n      lastIntersect = _this$_findRegion2[0],\n      lastIntersectIdx = _this$_findRegion2[1];\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    var newLeadRegion = [];\n    var newTailRegion = [];\n    var newMainRegion = _objectSpread(_objectSpread({}, cells), {}, {\n      isSpacer: false\n    });\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n    var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n    var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n  }\n  numCells() {\n    return this._numCells;\n  }\n  equals(other) {\n    return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n  }\n  _findRegion(cellIdx) {\n    var firstIdx = 0;\n    var lastIdx = this._regions.length - 1;\n    while (firstIdx <= lastIdx) {\n      var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      var middleRegion = this._regions[middleIdx];\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n    invariant(false, \"A region was not found containing cellIdx \" + cellIdx);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}